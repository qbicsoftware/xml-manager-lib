//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference
// Implementation, v2.2.8-b130911.1802
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2018.08.03 at 02:15:07 PM CEST
//

package life.qbic.xml.study;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang3.tuple.Pair;
import life.qbic.xml.manager.StudyXMLParser;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="qcatlevel" maxOccurs="unbounded">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="entity_id" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *                 &lt;attribute name="value" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *       &lt;/sequence>
 *       &lt;attribute name="label" type="{}variable_name_format" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {"qcatlevel"})
public class Qcategorical {

  @XmlElement(required = true)
  protected List<Qcatlevel> qcatlevel;
  @XmlAttribute(name = "label")
  protected String label;

  /**
   * Gets the value of the qcatlevel property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any
   * modification you make to the returned list will be present inside the JAXB object. This is why
   * there is not a <CODE>set</CODE> method for the qcatlevel property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
   * getQcatlevel().add(newItem);
   * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link Qcatlevel }
   * 
   * 
   */
  public List<Qcatlevel> getQcatlevel() {
    if (qcatlevel == null) {
      qcatlevel = new ArrayList<Qcatlevel>();
    }
    return this.qcatlevel;
  }

  /**
   * Gets the value of the label property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLabel() {
    return label;
  }

  /**
   * Sets the value of the label property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLabel(String value) {
    this.label = value;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((label == null) ? 0 : label.hashCode());
    result = prime * result + ((qcatlevel == null) ? 0 : qcatlevel.hashCode());
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Qcategorical other = (Qcategorical) obj;
    if (label == null) {
      if (other.label != null)
        return false;
    } else if (!label.equals(other.label))
      return false;
    if (qcatlevel == null) {
      if (other.qcatlevel != null)
        return false;
    } else if (!qcatlevel.equals(other.qcatlevel))
      return false;
    return true;
  }

  public Qcatlevel getLevelOrNull(String value) {
    for (Qcatlevel level : getQcatlevel()) {
      if (level.getValue().equals(value)) {
        return level;
      }
    }
    return null;
  }

  public void createLevels(Map<Pair<String, String>, List<String>> levels) {
    for (Pair<String, String> valunit : levels.keySet()) {
      createLevel(valunit.getLeft(), levels.get(valunit));
    }
  }

  private void createLevel(String value, List<String> ids) {
    Qcatlevel catLvl = StudyXMLParser.factory.createQcatlevel();
    catLvl.setValue(value);
    catLvl.getEntityId().addAll(ids);
    getQcatlevel().add(catLvl);
  }

  public void update(Map<Pair<String, String>, List<String>> newLevels) {
    for (Pair<String, String> newLevel : newLevels.keySet()) {
      List<String> idsForNewLevel = newLevels.get(newLevel);
      String newLevelValue = newLevel.getLeft();

      // first remove all identifiers from other levels since they can't be part of multiple levels
      removeIDsFromOldLevels(idsForNewLevel, newLevelValue);

      Qcatlevel xmlLevel = getLevelOrNull(newLevelValue);
      if (xmlLevel == null) {
        // if level exists, add all new identifiers on this level to the set, if not create it and
        // also set value
        createLevel(newLevelValue, idsForNewLevel);
      } else {
        xmlLevel.getEntityId().addAll(idsForNewLevel);
      }
    }
  }

  /**
   * remove new ids from every old level with the wrong level value
   * 
   * @param ids
   * @param newValue
   */
  private void removeIDsFromOldLevels(List<String> idsForNewLevel, String newValue) {
    Set<Qcatlevel> levelsToRemove = new HashSet<>();
    for (Qcatlevel oldLevel : getQcatlevel()) {
      if (!oldLevel.getValue().equals(newValue)) {
        oldLevel.getEntityId().removeAll(idsForNewLevel);
        // remove empty level completely
        if (oldLevel.getEntityId().isEmpty()) {
          levelsToRemove.add(oldLevel);
        }
      }
    }
    getQcatlevel().removeAll(levelsToRemove);
  }
}
